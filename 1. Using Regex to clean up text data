{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Using regex to clean up text data\n",
    "\n",
    "This notebook uses regex to clean up messy medical data and extract relevant infromation from the data. \n",
    "\n",
    "Each line of the `dates.txt` file corresponds to a medical note. Each note has a date that needs to be extracted, but each date is encoded in one of many formats.\n",
    "\n",
    "The goal is to correctly identify all of the different date variants encoded in this dataset and to properly normalize and sort the dates. \n",
    "\n",
    "Here is a list of some of the variants you might encounter in this dataset:\n",
    "* 04/20/2009; 04/20/09; 4/20/09; 4/3/09\n",
    "* Mar-20-2009; Mar 20, 2009; March 20, 2009;  Mar. 20, 2009; Mar 20 2009;\n",
    "* 20 Mar 2009; 20 March 2009; 20 Mar. 2009; 20 March, 2009\n",
    "* Mar 20th, 2009; Mar 21st, 2009; Mar 22nd, 2009\n",
    "* Feb 2009; Sep 2009; Oct 2010\n",
    "* 6/2008; 12/2009\n",
    "* 2009; 2010\n",
    "\n",
    "Once the date patterns have been extracted from the text, the next step is to sort them in ascending chronological order."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0         03/25/93 Total time of visit (in minutes):\\n\n",
       "1                       6/18/85 Primary Care Doctor:\\n\n",
       "2    sshe plans to move as of 7/8/71 In-Home Servic...\n",
       "3                7 on 9/27/75 Audit C Score Current:\\n\n",
       "4    2/6/96 sleep studyPain Treatment Pain Level (N...\n",
       "dtype: object"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# import required libraries \n",
    "import pandas as pd\n",
    "import re\n",
    "import numpy as np\n",
    "\n",
    "doc = [] # store all the contents of text file in a list \n",
    "with open(r'address\\dates.txt') as file:\n",
    "    for line in file:\n",
    "        doc.append(line)\n",
    "\n",
    "df = pd.Series(doc) #make a dataframe from the list for further manipulation \n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "#define all the patterans of dates that could be encountered inside the text file\n",
    "pattern1 = r'((?:\\d{1,2})/(?:\\d{1,2})/(?:\\d{2,4}))'\n",
    "pattern2 = r'((?:\\d{1,2})/(?:\\d{2,4}))'\n",
    "pattern3 = r'(\\d{4})'\n",
    "pattern4 = r'((?:\\d{1,2}n?d?t?h?s?[/,\\- ]*)?(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)[a-z]*'\\\n",
    "'[\\,.\\-]* (?:\\d{1,2}n?d?t?h?s?[/,\\- ]*)?\\d{2,4})'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "#use vectorized string operation to extract the above patterns from pandas series \n",
    "df_date = df.str.extract(pattern4) \n",
    "df_date1 = df.str.extract(pattern1)\n",
    "df_date2 = df.str.extract(pattern2)\n",
    "df_date3 = df.str.extract(pattern3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "nan\n"
     ]
    }
   ],
   "source": [
    "#change the dataframe to series to use datetime method later. Also, replace the dates at the index 25,29,40,71\n",
    "#manually as seen in the text file \n",
    "df_date = pd.Series(df_date[0], dtype='str')\n",
    "df_date1 = pd.Series(df_date1[0], dtype='str')\n",
    "df_date1[25] = '4/13/1982'\n",
    "df_date1[39] = '1/14/1981'\n",
    "df_date1[40] = '7/29/1975'\n",
    "df_date1[71] = '4/13/1989'\n",
    "df_date2 = pd.Series(df_date2[0], dtype='str')\n",
    "df_date3 = pd.Series(df_date3[0], dtype='str')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      03/25/93\n",
       "1       6/18/85\n",
       "2        7/8/71\n",
       "3       9/27/75\n",
       "4        2/6/96\n",
       "         ...   \n",
       "495         nan\n",
       "496         nan\n",
       "497         nan\n",
       "498         nan\n",
       "499         nan\n",
       "Name: 0, Length: 500, dtype: object"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_date1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "#replace the acronyms with their full names and space with comma\n",
    "mylist = ['Jan','Jan', 'Feb','Mar','Apr','May','Jun','Jun','Jul','Aug','Sep','Oct','Nov','Dec','Dec','','']\n",
    "mylist1 = ['January','Janaury', 'February','March','April','May','June','2Jun','July',\n",
    "           'August','September','October','November','December','Decemeber',',','.']\n",
    "for (i, j) in zip(mylist,mylist1):\n",
    "    df_date = df_date.str.replace(j,i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "#change the date time in the dataframe to pandas date time object \n",
    "df_dtime = pd.to_datetime(df_date, errors='ignore')\n",
    "df_dtime1 = pd.to_datetime(df_date1[0:125], errors='ignore')\n",
    "df_dtime2 = pd.to_datetime(df_date2[343:454], errors='ignore')\n",
    "df_dtime3 = pd.to_datetime(df_date3[454:500], errors='ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Combine all the dataframes into a single dataframe \n",
    "df_dtime[0:125] = df_dtime1\n",
    "df_dtime[343:454] = df_dtime2\n",
    "df_dtime[454:500] = df_dtime3\n",
    "df_dtime.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0        9\n",
       "1       84\n",
       "2        2\n",
       "3       53\n",
       "4       28\n",
       "      ... \n",
       "495    231\n",
       "496    141\n",
       "497    186\n",
       "498    161\n",
       "499    413\n",
       "Length: 500, dtype: int64"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#index of sorted values for dates in ascending order\n",
    "pd.Series(df_dtime.sort_values(ascending=True).index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9     1971-04-10\n",
       "84    1971-05-18\n",
       "2     1971-07-08\n",
       "53    1971-07-11\n",
       "28    1971-09-12\n",
       "         ...    \n",
       "231   2016-05-01\n",
       "141   2016-05-30\n",
       "186   2016-10-13\n",
       "161   2016-10-19\n",
       "413   2016-11-01\n",
       "Name: 0, Length: 500, dtype: datetime64[ns]"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#alternative way to sort the values with keeping the original index\n",
    "df_dtime.sort_values()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "### Example of using a funcion on the vectorized strings\n",
    "def len_list(x):\n",
    "    ind_len = []\n",
    "    for i in x:\n",
    "        ind_len.append(len(i))\n",
    "    return sum(ind_len)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    5\n",
       "1    4\n",
       "2    4\n",
       "3    4\n",
       "dtype: int64"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "seri = pd.Series(['dfhsdfk52fhs 25djf2.,!@', 'dsfj52 dfjs23dfj', 'djf25dfj dfj24ldjf','dfjs25djf43df'])\n",
    "seri.str.findall(r'(\\d+)').apply(len_list)"
   ]
  }
 ],
 "metadata": {
  "coursera": {
   "course_slug": "python-text-mining",
   "graded_item_id": "LvcWI",
   "launcher_item_id": "krne9",
   "part_id": "Mkp1I"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
